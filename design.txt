cpu
    configuration
    devices
        list:
            touchscreen
            timer
        can register interrupts and memory space
    interrupt
        default interrupt vector
            divide by zero
            absolute add from zero
                you can't add/sub_fz if the lhs_value is 0
            invalid opcode
            space fault: when cpu access unmapped memory
        devices can't fire interrupts when cpu is in interrupt handler
        interrupt handler is responsible of PC on interrupt handler exit
    instruction set
        jumps are always conditionnal
        x is index 1
        y is index 2
        s is reg slice
            T reg.b
            0 reg.t
            1 reg.w
        v is inline imm (inimm (size))
        implemented and tested opcodes are marked with an x
        00000000_: no param
x           0 nop
            intret
        00000001_: 1 imm.b/w
x           1 callabs imm.w
x           T callrel imm.b
        000001_xx: 1 index
x           0 not reg
x           T push reg
x           1 pop reg
        0000T_sxx: 1 imm.b/w, 1 index, 1 slice
x           0 set reg.t/b/w, imm.b/w
        00001_vxx: 1 inimm (1), 1 index, 1 imm.b/w // jump if same value
x           1 cjumpabs flagvalue flagindex imm.w
x           T cjumprel flagvalue flagindex imm.b
        00T_syyxx: 2 index, 1 slice
x           T load reg.b/t/w, [reg].b/w
x           1 store [reg].b/w, reg.b/t/w
        01___yyxx: 2 index
x           TTT add reg, reg
x           TT1 sub reg, reg
x           TT0 mul reg, reg
x           T1T div reg, reg
x           T11 mod reg, reg
x           T10 add_fz reg, reg
x           T0T sub_fz reg, reg
            T00 test reg, reg: does all comparaison and put result in flag reg
x           1TT and reg, reg
x           1T1 or reg, reg
x           1T0 xor reg, reg
x           100 mov reg, reg
        ___vvvvxx: 1 index, 1 inimm (4), can't start with 00 or 01
x           TTT add reg, inimm
x           TT1 sub reg, inimm
x           TT0 mul reg, inimm
x           T1T div reg, inimm
x           T11 mod reg, inimm
x           T10 add_fz reg, inimm
x           T0T sub_fz reg, inimm
            T00 test reg, inimm: does all comparaison and put result in flag reg
        not defined yet
            in imm
            out imm
            setup
    memory: harvard/neumann architecture mix
        memory access is made through pointers and doesn't crossover between memspace
        a pointer is word wide
        each pointer use it's upper byte to address a specific memory space
        the 2 lower byte is a 2 bytes offset in this memory space
        code space: 0000000
            program: positive offset
            interrupt handler and init: negative offset
        general memory space: 0000001
            general use: positive offset
            stack: negative offset
    registers
        9 registers: 1 word wide
            program pointer
            stack pointer
            flag register: each trit correspond to one comp
                diff, T if lesser, 0 if equal, 1 if greater
                greater_or_equal_diff, T if lesser, 1 if greater or equal
                lesser_or_equal_diff, T if greater, 1 if lesser or equal
                diff_fz, T if lesser, 0 if equal, 1 if greater
                greater_or_equal_diff_fz, T if lesser, 1 if greater or equal
                lesser_or_equal_diff_fz, T if greater, 1 if lesser or equal
                carry, T if no carry, 1 if carry
                sign
            6 general purpose
        reg.t is the most significant byte (top)
        reg.b is the least significant byte (bottom)
        reg.w is the whole value (word) <- default
    trit: 1 balanced ternary value
    byte: 9 trits little-endian
    word: 2 bytes little-endian
    https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics

bt behaviour:
    the equivalent xor operation for cryptographic purposes is widly different
    first thing is there is 3 different operations that can be used:
         01T  01T  01T
        00T1 010T 0T10
        1T10 10T1 110T
        T10T TT10 T0T1
