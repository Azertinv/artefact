cpu
    configuration
    devices
        list:
            touchscreen
            timer
        can register interrupts and memory space
    interrupt
        default interrupt vector
            divide by zero
            invalid opcode
            space fault: when cpu access unmapped memory
        devices can't fire interrupts when cpu is in interrupt handler
        interrupt handler is responsible of PC on interrupt handler exit
    instruction set
        registers
            load, store
        arithmetic: only use registers, no immediates
            add, sub, mul, div, mod
            add_fz, sub_fz
        logic: only use registers, no immediates
            https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics
            and, or, not, xor
        stack
            push, pop
        compare
            equal, greater, equal_dfz, greater_dfz
        control flow
            jump, conditional jump, call, ret
        devices
            communication
            setup
        interrupts
            return from interrupt
    memory: harvard/neumann architecture mix
        memory access is made through pointers and doesn't crossover between memspace
        a pointer is word wide
        each pointer use it's upper byte to address a specific memory space
        the 2 lower byte is a 2 bytes offset in this memory space
        code space: 0000000
            program: positive offset
            interrupt handler and init: negative offset
        general memory space: 0000001
            general use: positive offset
            stack: negative offset
    registers
        9 registers: 1 word wide
            program pointer, advance away from zero
            stack pointer
            result register
            6 general purpose
    trit: 1 balanced ternary value
    byte: 7 trits little-endian
    word: 3 bytes little-endian
